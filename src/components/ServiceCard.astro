---
function getRuleCount(service: Service): number {
    // 0 if all exporters in service have no/null rules
    return (
        service.exporters
            .map((exporter) => {
                return exporter.rules?.length;
            })
            .reduce((prev, cur) => {
                return (prev ?? 0) + (cur ?? 0);
            }, 0) ?? 0
    );
}

import type { RuleSet } from "src/pages/index.astro";
import ServiceLogo from "./ServiceLogo.astro";

import { camelCase } from "lodash-es";

export type Service = RuleSet["groups"][number]["services"][number];

interface Props {
    service: Service;
}

const { service } = Astro.props;
---

<div class="border p-6">
    <!-- Header -->
    <div class="flex flex-row gap-2 pb-4 items-center">
        <ServiceLogo
            iconName={service.name.split(" ")[0]?.toLowerCase() ?? ""}
        />
        <h3>{service.name}</h3>
    </div>
    <!-- Rules -->
    <p class="text-ellipsis line-clamp-3">
        <span class="tag">{`${getRuleCount(service)} rules`}</span>
        <span>
            {
                service.exporters.map((exp) => {
                    return exp.rules?.map((rule) => rule.name).join(", ");
                })
            }
        </span>
        {/* {service.exporters.map((ex) => {})} */}
    </p>
    <button id={`trigger-modal-${service.name}`} class="block w-full"
        >View Alert Rules</button
    >
    <dialog class="border-2 p-4 rounded-md" id={service.name}>
        <h1>{service.name}</h1>
        {
            service.exporters.map((exp) => {
                return (
                    <>
                        <h2>{exp.slug}</h2>
                        {exp.rules?.map((rule) => {
                            const summaryFallback = () =>
                                `${rule.name} (instance {{ $labels.instance }})`;
                            return (
                                <>
                                    <h3>{rule.name}</h3>
                                    <p>{rule.description}</p>
                                    <code>
                                        {`- alert: ${camelCase(rule.name).replace(" ", "")}
      expr: '${rule.query}'
      for: ${rule.for ?? "0m"}
      labels:
        severity: ${rule.severity}
      annotations:
        summary: ${"summary" in rule && rule.summary ? rule.summary : summaryFallback()}
        description: "${ rule.description.replace('"', '\"') } \\n  VALUE = {{ $value }}\\n  LABELS = {{ $labels }}"
                                        `}
                                    </code>
                                </>
                            );
                        })}
                    </>
                );
            })
        }
    </dialog>
</div>

<script>
    const buttons = document.querySelectorAll(`[id^='trigger-modal']`);

    // Handle clicks on each button.
    buttons.forEach((button) => {
        button.addEventListener("click", () => {
            const modalId = button.id.replace("trigger-modal-", "");
            const modal = document.getElementById(modalId);
            if (modal instanceof HTMLDialogElement) {
                modal.showModal();
            }
        });
    });
</script>
