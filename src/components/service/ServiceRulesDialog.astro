---
interface Props {
    service: Service;
}
import Dialog from "../Dialog.astro";
import { Code } from "astro:components";
import { Icon } from "astro-icon/components";
import { camelCase, upperFirst } from "lodash-es";
import type { Service, Rule } from "src/pages/index.astro";
import ServiceHeader from "./ServiceHeader.astro";
import ServiceTag from "./ServiceTag.astro";

function getYamlForRule(rule: Rule): string {
    const summaryFallback = () =>
        `${rule.name} (instance {{ $labels.instance }})`;
    // UpperCamelCase rule.name
    const alert = upperFirst(camelCase(rule.name).replace(" ", ""));
    
    //
    const comments =
        "comments" in rule
            // Comments in YML converted to JSON adds \n to it. The slice removes a trailing \n that is not needed here.
            ? rule.comments.split("\n").slice(0,-1).map((comment) => `# ${comment.trim()}\n`).join('')
            : "";

    return `${comments}- alert: ${alert}
  expr: '${rule.query}'
  for: ${rule.for ?? "0m"}
  labels:
    severity: ${rule.severity}
  annotations:
    summary: ${"summary" in rule && rule.summary ? rule.summary : summaryFallback()}
    description: "${rule.description.replace('"', '"')} \\n  VALUE = {{ $value }}\\n  LABELS = {{ $labels }}"`;
}

const { service } = Astro.props;
---

<Dialog id={service.name}>
    <section class="flex flex-row items-center gap-4" slot="header">
        <ServiceHeader service={service} />
        <ServiceTag service={service} />
    </section>
    {
        service.exporters.map((exp) => {
            return (
                <div slot="body">
                    <h2>{exp.slug}</h2>
                    {exp.rules?.map((rule, index) => {
                        return (
                            <section class="grid grid-cols-[min-content_minmax(0,_1fr)] gap-4 mb-8">
                                {/* Circular number indicator */}
                                <div class="h-8 w-8 text-center leading-8 rounded-full text-emphasis-muted">
                                    {index + 1}
                                </div>
                                <div>
                                    <h3>{rule.name}</h3>
                                    <p>{rule.description}</p>
                                    <div class="rounded-md">
                                        {/* Copy */}
                                        <input
                                            id={`value-${rule.name}`}
                                            value={getYamlForRule(rule)}
                                            readonly
                                            hidden
                                        />
                                        <button
                                            id={`copy-${rule.name}`}
                                            class="absolute right-4 rounded-br-none rounded-tl-none bg-white bg-opacity-50 border-none py-2 rounded-md text-sm uppercase"
                                        >
                                            <span class="flex flex-row items-center">
                                                <Icon
                                                    class="inline mr-1"
                                                    name="ph:copy"
                                                />
                                                <span>Copy</span>
                                            </span>
                                        </button>
                                        <Code
                                            class="p-4"
                                            code={getYamlForRule(rule)}
                                            lang="yaml"
                                            theme="catppuccin-latte"
                                        />
                                    </div>
                                </div>
                            </section>
                        );
                    })}
                </div>
            );
        })
    }
</Dialog>

<script>
    const buttons = document.querySelectorAll(`[id^='copy-']`);

    buttons.forEach((button) => {
        button.addEventListener("click", async () => {
            // What if we end up replacing copy- in a copy-{rule.name}
            const inputId = button.id.replace(/^copy-/, "value-");
            const input = document.getElementById(inputId);

            if (
                input instanceof HTMLInputElement &&
                navigator &&
                button instanceof HTMLButtonElement
            ) {
                navigator.clipboard.writeText(input.value).then(() => {
                    
                    // Disable button and set label to Copied!
                    const older = button.innerHTML;
                    button.innerHTML = "Copied.";
                    button.disabled = true;
    
                    // Re-enable button in 300ms
                    setTimeout(() => {
                        button.innerHTML = older;
                        button.disabled = false;
                    }, 500);
                });
                
                
            }
        });
    });
</script>
