---
import "../base.css";
import json from "data/rules.json";
import Header from "src/components/Header.astro";
import ServiceCard from "src/components/service/ServiceCard.astro";
import { PiMagnifyingGlass } from "react-icons/pi";
// Types inferred from JSON
export type RuleSet = typeof json;
export type Group = RuleSet["groups"][number];
export type Service = Group["services"][number];
export type Exporter = Service["exporters"][number];
export type Rule = NonNullable<Exporter["rules"]>[number];
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/logo.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<!-- Inter -->
		<link rel="preconnect" href="https://rsms.me/" />
		<link rel="stylesheet" href="https://rsms.me/inter/inter.css" />
		<!-- Jetbrains Mono? -->
		<!-- Use BunnyCDN instead? -->
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link
			href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400&display=swap"
			rel="stylesheet"
		/>

		<title>Awesome Prometheus Toolkit</title>
	</head>
	<body>
		<Header />
		<main class="mx-auto max-w-6xl px-4 my-8">
			<h1>Browse Library</h1>
			<div class="input mb-8 flex flex-row items-center gap-2">
				<PiMagnifyingGlass />
				<input
					id="component-search"
					name="component-search"
					type="search"
					placeholder="Search for a component"
					class="flex-grow" />
			</div>

			<!-- Groups -->
			{
				json.groups.map((group) => {
					return (
						<section data-group-name={group.name} class="mb-16">
							<h2>{group.name}</h2>
							{/* Card grid */}
							<div class="grid grid-dynamic-base gap-6">
								{group.services.map((service) => {
									return <ServiceCard service={service} />;
								})}
							</div>
						</section>
					);
				})
			}
		</main>
		<!-- Footer -->
		<footer class="p-8 border-t">
			<section class="max-w-6xl mx-auto">
				<p>
					Built with Astro. <a
						target="_blank"
						href="https://samber.github.io/awesome-prometheus-alerts/"
						>Original by samber.</a
					>
				</p>
			</section>
		</footer>
	</body>
</html>

<script>
	const HIDDEN_CLASS = "hidden";
	const SERVICE_CARD_SELECTOR = "[data-service-name]";

	function filterServices(searchTerm: string) {
		const sections = document.querySelectorAll("[data-group-name]"); // Select all group sections

		sections.forEach((section) => {
			const services = section.querySelectorAll(SERVICE_CARD_SELECTOR); // Select all service cards in this section
			let hasVisibleService = false;

			services.forEach((serviceCard) => {
				const serviceName = serviceCard
					.getAttribute("data-service-name")
					?.toLowerCase(); // Get the service name from the data attribute
				if (serviceName) {
					if (serviceName.includes(searchTerm)) {
						serviceCard.classList.remove(HIDDEN_CLASS); // Show service card if it matches
						hasVisibleService = true;
					} else {
						serviceCard.classList.add(HIDDEN_CLASS); // Hide service card if it doesn't match
					}
				}
			});

			// Hide the entire section if no services are visible
			if (hasVisibleService) {
				section.classList.remove(HIDDEN_CLASS);
			} else {
				section.classList.add(HIDDEN_CLASS);
			}
		});
	}

	const input = document.getElementById("component-search");
	if (input instanceof HTMLInputElement) {
		input.addEventListener("keyup", (ev) => {
			if (ev.target instanceof HTMLInputElement) {
				filterServices(ev.target.value);
			}
		});
	}
</script>

<script is:inline>
!function(t,e){var o,n,p,r;e.__SV||(window.posthog=e,e._i=[],e.init=function(i,s,a){function g(t,e){var o=e.split(".");2==o.length&&(t=t[o[0]],e=o[1]),t[e]=function(){t.push([e].concat(Array.prototype.slice.call(arguments,0)))}}(p=t.createElement("script")).type="text/javascript",p.async=!0,p.src=s.api_host.replace(".i.posthog.com","-assets.i.posthog.com")+"/static/array.js",(r=t.getElementsByTagName("script")[0]).parentNode.insertBefore(p,r);var u=e;for(void 0!==a?u=e[a]=[]:a="posthog",u.people=u.people||[],u.toString=function(t){var e="posthog";return"posthog"!==a&&(e+="."+a),t||(e+=" (stub)"),e},u.people.toString=function(){return u.toString(1)+".people (stub)"},o="init capture register register_once register_for_session unregister unregister_for_session getFeatureFlag getFeatureFlagPayload isFeatureEnabled reloadFeatureFlags updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures on onFeatureFlags onSessionId getSurveys getActiveMatchingSurveys renderSurvey canRenderSurvey getNextSurveyStep identify setPersonProperties group resetGroups setPersonPropertiesForFlags resetPersonPropertiesForFlags setGroupPropertiesForFlags resetGroupPropertiesForFlags reset get_distinct_id getGroups get_session_id get_session_replay_url alias set_config startSessionRecording stopSessionRecording sessionRecordingStarted captureException loadToolbar get_property getSessionProperty createPersonProfile opt_in_capturing opt_out_capturing has_opted_in_capturing has_opted_out_capturing clear_opt_in_out_capturing debug".split(" "),n=0;n<o.length;n++)g(u,o[n]);e._i.push([i,s,a])},e.__SV=1)}(document,window.posthog||[]);
posthog.init('phc_rBaVImppSMHuzevW16i2ugCCQEWQa5DODe9Wsb7i8Nq',{api_host:'https://posthog-rp-prometheus.muf-naza.workers.dev', person_profiles: 'identified_only' // or 'always' to create profiles for anonymous users as well
})
</script>