---
import "../base.css";
import yaml from "js-yaml";
import Logo from '../components/Logo.astro'
const response = await fetch(
	"https://raw.githubusercontent.com/samber/awesome-prometheus-alerts/refs/heads/master/_data/rules.yml",
	{},
);

if (!response.ok) {
	throw Error("All is not daijobu.");
}

const rawYml = await (await response.blob()).text();

const json = yaml.load(rawYml) as JsonExpected;
if (!json) {
	throw Error("JSON generated by js-yaml was null.");
}

type Rule = {
	name: string;
	description: string;
	query: string;
	severity: string;
	for: string;
	comments: string;
	summary: string;
};
type Exporter = {
	slug: string;
	rules?: Rule[];
	name: string;
	doc_url: string;
};
type Service = {
	name: string;
	exporters: Exporter[];
};
type Group = {
	name: string;
	services: Service[];
};
type JsonExpected = {
	groups: Group[];
};
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<!-- Inter -->
		<link rel="preconnect" href="https://rsms.me/" />
		<link rel="stylesheet" href="https://rsms.me/inter/inter.css" />
		<!-- Jetbrains Mono? -->
		<!-- Use BunnyCDN instead? -->
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link
			href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@100..800&display=swap"
			rel="stylesheet"
		/>

		<title>Awesome Astro Prometheus</title>
	</head>
	<body>
		<header class="border-b py-4 sticky top-0 bg-white">
			<section class="mx-auto max-w-5xl px-4">
				<!-- Logo -->
				<Logo />
			</section>
		</header>
		<main class="mx-auto max-w-5xl px-4 my-8">
			<h1 class="text-lg mb-8">Browse Library</h1>
			<input type="search" class=""/>
			{
				json.groups.map((group) => {
					// const exportes = group.exporters.map((exporter) => )
					return (
						<section [data-group-name]={group.name} class="mb-16" >
							<h2 class="text-sm uppercase text-gray-600 mb-2">{group.name}</h2>
							<div class="grid grid-dynamic-base gap-6">
								{group.services.map((service) => {
									return (
										<div class="border p-6">
											<div class="flex flex-row gap-2 pb-4 items-center">
												<ServiceLogo iconName={service.name.split(" ")[0]?.toLowerCase() ?? ""} />
												<h3 class="font-bold">{service.name}</h3>
											</div>
											<p class="text-ellipsis line-clamp-3">
												<span class="tag">
													{service.exporters
														.map((exporter) => {
															return exporter
																.rules?.length;
														})
														.reduce((prev, cur) => {
															return (
																(prev ?? 0) +
																(cur ?? 0)
															);
														}, 0)}{" "}
													rules</span>{" "}
												{service.exporters.map(
													(exp) => {
														return exp.rules
															?.map(
																(rule) =>
																	rule.name,
															)
															.join(", ");
													},
												)}
												{/* {service.exporters.map((ex) => {})} */}
											</p>
										</div>
									);
								})}
							</div>
						</section>
					);
				})
			}
		</main>
		<footer class="p-4 border-t">Built with Astro.</footer>
	</body>
</html>
